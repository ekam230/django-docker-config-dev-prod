https://webdevblog.ru/kak-ispolzovat-django-postgresql-i-docker/

https://fixmypc.ru/post/sozdanie-i-zapusk-konteinera-docker-s-django-postgressql-gunicorn-i-nginx/

У вас есть 2 основных файла Docker:

docker-compose.yml - для локальной разработки. Запускает только Django и Postgres. В случае этого запуска база данных будет очищена (файл 'app/entrypoint.sh');
docker-compose.prod.yml - для запуска на релизных версиях. Запускает Django, Postgres, Nginx и Gunicorn. Номер порта, для Nginx, указан в самом файле (1337).
В каждом файле docker-compose используются файлы, с переменными окружений, которые начинаются на '.env'. В случае локального образа - это один файл (переменные для Postgres прописаны в docker-compose.yml), в случае продакшена это два файла. Все файлы имеют одинаковые переменные, значение которых можно изменить:

DEBUG - принимает значение от 0 до 1. В случае 1 будут выводится сообщения об ошибках при открытии страниц сайта;
SECRET_KEY - ключ безопасности, который чаще всего имеет разное значение в случае локального запуска и продакшена;
ALLOWED_HOSTS - имена или ip адреса хостов через пробел, через которые можно подключиться к Django;
POSTGRES_ENGINE - модуль для работы с базой. Обычно не изменяется;
POSTGRES_DB - название базы, которую хотите использовать;
POSTGRES_USER - пользователь;
POSTGRES_PASSWORD - пароль;
POSTGRES_HOST - название контейнера (используется db);
POSTGRES_PORT - порт;
DATABASE - если значение не равно postgres не будет осуществлена проверка работы базы данных.
Для запуска образа для разработки выполните:

docker-compose up -d --build
В случае образа для релиза выполните:

docker-compose -f docker-compose.prod.yml up -d --build
В отличие от обычного образа, в случае продакшена нужно дополнительно выполнять миграции и сбор статических файлов:

docker-compose -f docker-compose.prod.yml exec web python manage.py migrate --noinput
docker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --no-input --clear 
 